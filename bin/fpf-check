#!/bin/sh

#/ Usage: fpf-check [--prefix=<prefix>] <name>
#/   --prefix=<prefix> installation prefix
#/   <name>            package name

set -e

. "$(dirname "$(dirname "$0")")/lib/fpf.sh"

# The default prefix is the one in which the FPF tools are installed.
PREFIX="$(dirname "$(dirname "$0")")"

usage() {
	grep "^#/" "$0" | cut -c4- 1>&2
	exit "$1"
}
while [ "$#" -gt 0 ]
do
	case "$1" in
		--prefix) PREFIX="$2" shift 2;;
		--prefix=*) PREFIX="$(echo "$1" | cut -c10-)" shift;;
		-h|--help) usage 0;;
		-*) usage 1;;
		*) break;;
	esac
done
NAME="$1"
[ -z "$PREFIX" -o -z "$NAME" ] && usage 1

# It's critical that the prefix be fully-qualified or Git will lose track
# of itself by changing its working directory.
PREFIX="$(cd "$PREFIX" && pwd)"

# Perform a quick sanity check: make sure the package is installed.
LIB="$PREFIX/lib/fpf"
[ ! -d "$LIB/$NAME.git" ] && echo "fpf: $NAME is not installed" >&2 && exit 1

# Create a temporary directory, which will be cleaned up at exit.  This file
# collects standard output from `_verify_mode` function calls.
TMP="$(mktemp)"
trap "rm -f \"$TMP\"" EXIT INT TERM

# Export `GIT_DIR` and `GIT_WORK_TREE` for subsequent `git`(1) commands.
export GIT_DIR="$LIB/$NAME.git"
export GIT_WORK_TREE="$PREFIX"

# Verify the access mode of objects in the working copy match those in
# the package.
COMMIT="$(git rev-parse "HEAD")"
TREE="$(git show --pretty="format:%T" "$COMMIT" | head -n1)"
_git_ls_tree "$TREE" | while read MODE TYPE SHA PATHNAME
do
	L_MODE="$(echo -n "$MODE" | tail -c4)"
	P_MODE="$(_mode "$PREFIX/$PATHNAME" 2>"/dev/null" || true)"
	if [ -z "$P_MODE" ]
	then
		echo "fpf: $PREFIX/$PATHNAME is missing" >&2
		echo 1
	elif [ -n "$L_MODE" -a "$L_MODE" != "$P_MODE" ]
	then
		echo "fpf: $PREFIX/$PATHNAME mode is $P_MODE, should be $L_MODE" >&2
		echo 1
	fi
done >"$TMP"

# Verify that none of the installed files have been changed from their
# packaged versions.
git diff-files --color --exit-code --stat

# If the mode and inode verifications above encountered any problems, the
# size of the temporary file will be non-zero.
[ "$(stat -c"%s" "$TMP")" = 0 ] || exit 1
