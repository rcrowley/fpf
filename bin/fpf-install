#!/bin/sh

#/ Usage: fpf-install [--prefix=<prefix>] <package>
#/   --prefix=<prefix> installation prefix
#/   <package>         package pathname

set -e

. "$(dirname "$(dirname "$0")")/lib/fpf.sh"

# The default prefix is the one in which the FPF tools are installed.
PREFIX="$(dirname "$(dirname "$0")")"

usage() {
	grep "^#/" "$0" | cut -c4- 1>&2
	exit "$1"
}
while [ "$#" -gt 0 ]
do
	case "$1" in
		--prefix) PREFIX="$2" shift 2;;
		--prefix=*) PREFIX="$(echo "$1" | cut -c10-)" shift;;
		-h|--help) usage 0;;
		-*) usage 1;;
		*) break;;
	esac
done
PACKAGE="$1"
[ -z "$PREFIX" -o -z "$PACKAGE" ] && usage 1

# It's critical that the prefix be fully-qualified or Git will lose track
# of itself by changing its working directory.
PREFIX="$(cd "$PREFIX" && pwd)"

# Extract the package and its metadata into a temporary directory, which
# will be cleaned up at exit.  Check that the metadata necessary for all
# FPF packages is present using the temporary `GIT_DIR`.
LIB="$PREFIX/lib/fpf"
mkdir -p "$LIB"
TMP="$(mktemp -d --tmpdir="$LIB")"
export GIT_DIR="$TMP"
trap "rm -rf \"$TMP\"" EXIT INT TERM
tar xf "$PACKAGE" -C "$TMP"
cat "$GIT_DIR/config"
ARCH="$(git config "fpf.arch" || true)"
[ -n "$ARCH" -a "$ARCH" != "$(_arch)" ] &&
echo "fpf: $PACKAGE is for $ARCH, not $(_arch)" >&2 && exit 1
NAME="$(git config "fpf.name" || true)"
[ -z "$NAME" ] && echo "fpf: $PACKAGE has no name" >&2 && exit 1
VERSION="$(git config "fpf.version" || true)"
[ -z "$VERSION" ] && echo "fpf: $PACKAGE has no version" >&2 && exit 1

# Verify that no version of this package is already installed in this prefix.
# Export `GIT_DIR` for subsequent `git`(1) commands.
export GIT_DIR="$LIB/$NAME.git"
if [ -d "$GIT_DIR" ]
then
	INST_VERSION="$(git config "fpf.version")"
	echo "fpf: $NAME $INST_VERSION already installed" >&2 && exit 1
fi

# Now that the name of the package is known, move it into the appropriate
# place in FPF's library directory.
mv "$TMP" "$GIT_DIR"

# Checkout a working copy of the package in FPF's library.  `git-status`(1)
# and `git-diff-files`(1) are now able to verify the integrity of the package.
COMMIT="$(git rev-parse "HEAD")"
TREE="$(git show --pretty="format:%T" "$COMMIT" | head -n1)"
_git_checkout_tree "$TREE" "$PREFIX"

# Now the repository is non-bare, though the working copy is intermingled
# with other packages installed under this prefix.
git config --bool "core.bare" "false"
export GIT_WORK_TREE="$PREFIX"

# Update Git's index, which enables Git's typical working copy integrity
# checks.  Without these commands, the index file contains null bytes for
# all the `stat`(2) fields stored in the index.
hexdump "$GIT_DIR/index" || true
git reset >"/dev/null"
hexdump "$GIT_DIR/index" || true
git update-index --refresh
hexdump "$GIT_DIR/index" || true

# Verify the installation's integrity for good measure.  This isn't strictly
# necessary but it's a good sanity check for `fpf-check`(1).
$(dirname "$0")/fpf-check --prefix="$PREFIX" "$NAME" >"/dev/null"
