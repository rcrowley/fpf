#!/bin/sh

#/ Usage: fpf-install [-a<archive>] [--no-deps] [--prefix=<prefix>] [-p] [-v<version>] <name>
#/   -a<archive>         archive URI
#/   --no-deps           don't install dependencies
#/   --prefix=<prefix>   installation prefix
#/   -p, --pin, --pinned pin to exactly <version>
#/   -v<version>         version number to install
#/   <name>              package name

set -e

. "$(dirname "$(dirname "$0")")/lib/fpf.sh"

# The default when installing is to manage dependencies.
DEPS=1

# The default is to allow newer versions of packages.
PINNED=0

# The default prefix is the one in which the FPF tools are installed.
PREFIX="$(dirname "$(dirname "$0")")"

usage() {
	grep "^#/" "$0" | cut -c"4-" >&2
	exit "$1"
}
while [ "$#" -gt 0 ]
do
	case "$1" in
		-a|--archive) ARCHIVE="$2" shift 2;;
		-a*) ARCHIVE="$(echo "$1" | cut -c"3-")" shift;;
		--deps) DEPS=1 shift;;
		--no-deps) DEPS=0 shift;;
		--archive=*) ARCHIVE="$(echo "$1" | cut -c"11-")" shift;;
		--prefix) PREFIX="$2" shift 2;;
		--prefix=*) PREFIX="$(echo "$1" | cut -c"10-")" shift;;
		-p|--pin|--pinned) PINNED=1 shift;;
		-v|--version) VERSION="$2" shift 2;;
		-v*) VERSION="$(echo "$1" | cut -c"3-")" shift;;
		--version=*) VERSION="$(echo "$1" | cut -c"11-")" shift;;
		-h|--help) usage 0;;
		-*) usage 1;;
		*) break;;
	esac
done
NAME="$1"
[ -z "$PREFIX" -o -z "$NAME" ] && usage 1

# When called without `-a`, iterate over all the archives that have been
# added, stopping after the first one which contains the package.
if [ -z "$ARCHIVE" ]
then
	while read ARCHIVE
	do
		"$0" -a"$ARCHIVE" "$@" && exit
	done <"$LIB/archives.txt"
	fpf_exit "$NAME not found in any archive"
fi

# Create a temporary directory, which will be cleaned up at exit.
TMP="$(mktemp -d)"
trap "rm -rf \"$TMP\"" EXIT INT TERM

# Download the index of all packages in the archive.
curl -o"$TMP/index.txt" -s "$ARCHIVE/index.txt" ||
wget -O"$TMP/index.txt" -q "$ARCHIVE/index.txt" ||
fpf_exit "index.txt not found in $ARCHIVE"

# Verify the integrity of the index with the GPG public keyring that
# was downloaded earlier and saved for this moment.
curl -o"$TMP/index.txt.gpg" -s "$ARCHIVE/index.txt.gpg" ||
wget -O"$TMP/index.txt.gpg" -q "$ARCHIVE/index.txt.gpg" ||
fpf_exit "index.txt.gpg not found in $ARCHIVE"
gpg -q \
	--keyring "$PREFIX/lib/fpf/keyring.gpg" --no-default-keyring \
	--verify "$TMP/index.txt.gpg" "$TMP/index.txt"

# Select the appropriate package from the index.  This is easy if the version
# is pinned.  Otherwise, select the newest.
if [ "$PINNED" = 1 ]
then INDEX="$(grep "  $NAME/$VERSION/" "$TMP/index.txt")"
else
	V="$(cut -d"/" -f"2" "$TMP/index.txt" | fpf_rpmvercmp_sort | tail -n"1")"
	INDEX="$(grep "  $NAME/$V/" "$TMP/index.txt" | sort -nr | head -n"1")"
fi

# Verify that the version selected meets the stated version requirements.
if [ "$VERSION" ]
then
	fpf_rpmvercmp "$(echo "$INDEX" | cut -d"/" -f"2")" "$([ "$PINNED" = 1 ] && echo "==" || echo ">=")" "$VERSION" ||
	fpf_exit "can't meet version requirement $VERSION"
fi

# Extract the SHA1 sum and URI of the package to install.
SHA="$(echo "$INDEX" | cut -d" " -f"1")"
URI="$(echo "$INDEX" | cut -d" " -f"3")"
[ -z "$SHA" -o -z "$URI" ] && fpf_exit "$NAME not found in $ARCHIVE"

# Download the package itself.
curl -o"$TMP/$NAME.fpf" -s "$ARCHIVE/$URI" ||
wget -O"$TMP/$NAME.fpf" -q "$ARCHIVE/$URI"

# Verify the package's SHA1 sum, completing the security protocol.
[ "$(sha1sum "$TMP/$NAME.fpf" | cut -d" " -f"1")" != "$SHA" ] &&
fpf_exit "downloaded package SHA1 sum doesn't match $SHA"

# Unpack the package in the installation prefix.
"$(dirname "$0")/fpf-unpack" "--$([ "$DEPS" = 1 ] || echo "no-")deps" --prefix="$PREFIX" "$TMP/$NAME.fpf"
