#!/bin/sh

#/ Usage: fpf-install [--no-deps] [--prefix=<prefix>] <package>
#/   --prefix=<prefix> installation prefix
#/   <package>         package pathname

set -e

. "$(dirname "$(dirname "$0")")/lib/fpf.sh"

# The default is to manage dependencies.
DEPS=1

# The default prefix is the one in which the FPF tools are installed.
PREFIX="$(dirname "$(dirname "$0")")"

usage() {
	grep "^#/" "$0" | cut -c4- 1>&2
	exit "$1"
}
while [ "$#" -gt 0 ]
do
	case "$1" in
		--deps) DEPS=1 shift;;
		--no-deps) DEPS=0 shift;;
		--prefix) PREFIX="$2" shift 2;;
		--prefix=*) PREFIX="$(echo "$1" | cut -c10-)" shift;;
		-h|--help) usage 0;;
		-*) usage 1;;
		*) break;;
	esac
done
PACKAGE="$1"
[ -z "$PREFIX" -o -z "$PACKAGE" ] && usage 1

# It's critical that the prefix be fully-qualified or Git will lose track
# of itself by changing its working directory.
PREFIX="$(cd "$PREFIX" && pwd)"

# Extract the package and its metadata into a temporary directory, which
# will be cleaned up at exit.  Check that the metadata necessary for all
# FPF packages is present using the temporary `GIT_DIR`.
LIB="$PREFIX/lib/fpf"
mkdir -p "$LIB"
TMP="$(mktemp -d --tmpdir="$LIB")"
export GIT_DIR="$TMP"
trap "rm -rf \"$TMP\"" EXIT INT TERM
tar xf "$PACKAGE" -C "$TMP"
ARCH="$(git config "fpf.arch" || true)"
[ -n "$ARCH" -a "$ARCH" != "$(fpf_arch)" ] &&
echo "fpf: $PACKAGE is for $ARCH, not $(fpf_arch)" >&2 && exit 1
NAME="$(git config "fpf.name" || true)"
[ -z "$NAME" ] && echo "fpf: $PACKAGE has no name" >&2 && exit 1
VERSION="$(git config "fpf.version" || true)"
[ -z "$VERSION" ] && echo "fpf: $PACKAGE has no version" >&2 && exit 1

# Verify that no version of this package is already installed in this prefix.
# Export `GIT_DIR` for subsequent `git`(1) commands.
export GIT_DIR="$LIB/$NAME.git"
if [ -d "$GIT_DIR" ]
then
	INST_VERSION="$(git config "fpf.version")"
	echo "fpf: $NAME $INST_VERSION already installed" >&2 && exit 1
fi

# Now that the name of the package is known, move it into the appropriate
# place in FPF's library directory.
mv "$TMP" "$GIT_DIR"

# Create a temporary file to hold rollback information.  Commands listed
# in this file will be run and then the file will be cleaned up on exit.
TMP="$(mktemp)"
echo "rm -rf \"$GIT_DIR\"" >"$TMP"
trap "tac \"$TMP\" | sh; rm -f \"$TMP\"" EXIT INT TERM

{

	# Install dependencies from system package managers (APT and Yum) if
	# those package managers are present on this system.
	if which apt-get dpkg >"/dev/null" 2>"/dev/null"
	then fpf_deps "apt"
	fi
	if which yum rpm >"/dev/null" 2>"/dev/null"
	then fpf_deps "yum"
	fi

	# Install dependencies from language-level package managers (RubyGems,
	# etc.).  These package managers must exist on `$PATH`
	fpf_deps "cpan"
	fpf_deps "gem"
	fpf_deps "npm"
	fpf_deps "pear"
	fpf_deps "pecl"
	fpf_deps "pip"

	# Install dependencies from FPR, the APT to FPF's dpkg.
	fpf_deps "fpr"

} 3>>"$TMP"

# Checkout a woring copy of the package in FPF's library.  `git-status`(1)
# and `git-diff-files`(1) are now able to verify the integrity of the package.
# Files must not exist or the installation will be rolled back.  Each file
# and directory created are added to the rollback procedure.
COMMIT="$(git rev-parse "HEAD")"
TREE="$(git show --pretty="format:%T" "$COMMIT" | head -n1)"
fpf_git_ls "$TREE" | while read MODE TYPE SHA PATHNAME
do
	MODE="$(echo -n "$MODE" | tail -c4)"
	case "$TYPE" in
		"blob")
			[ -f "$PREFIX/$PATHNAME" ] &&
			echo "fpf: $PREFIX/$PATHNAME already installed" >&2 && exit 1
			git cat-file "blob" "$SHA" >"$PREFIX/$PATHNAME"
			chmod "$MODE" "$PREFIX/$PATHNAME"
			echo "rm \"$PREFIX/$PATHNAME\"" >&3;;
		"tree")
			mkdir -m"$MODE" -p "$PREFIX/$PATHNAME"
			echo "rmdir --ignore-fail-on-non-empty \"$PREFIX/$PATHNAME\"" >&3;;
	esac
done 3>>"$TMP"

# Now the repository is non-bare, though the working copy is intermingled
# with other packages installed under this prefix.
git config --bool "core.bare" "false"
export GIT_WORK_TREE="$PREFIX"

# Update Git's index, which enables Git's typical working copy integrity
# checks.  Without these commands, the index file contains null bytes for
# all the `stat`(2) fields stored in the index.
git reset >"/dev/null"
git update-index --refresh

# Verify the installation's integrity for good measure.  This isn't strictly
# necessary but it's a good sanity check for `fpf-check`(1).
$(dirname "$0")/fpf-check --prefix="$PREFIX" "$NAME" >"/dev/null"

# Success!  Cancel installation rollback.
truncate -s"0" "$TMP"
