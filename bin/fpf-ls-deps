#!/bin/sh

#/ Usage: fpf-ls-deps [--prefix=<prefix>] <name>
#/   --prefix=<prefix> installation prefix
#/   <name>            package name

set -e

. "$(dirname "$(dirname "$0")")/lib/fpf.sh"

# The default prefix is the one in which the FPF tools are installed.
PREFIX="$(dirname "$(dirname "$0")")"

usage() {
	grep "^#/" "$0" | cut -c"4-" >&2
	exit "$1"
}
while [ "$#" -gt 0 ]
do
	case "$1" in
		--prefix) PREFIX="$2" shift 2;;
		--prefix=*) PREFIX="$(echo "$1" | cut -c"10-")" shift;;
		-h|--help) usage 0;;
		-*) usage 1;;
		*) break;;
	esac
done
NAME="$1"
[ -z "$PREFIX" -o -z "$NAME" ] && usage 1

# It's critical that the prefix be fully-qualified or Git will lose track
# of itself by changing its working directory.
PREFIX="$(cd "$PREFIX" && pwd)"

# Verify that the package is in FPF's library directory.  Since satisfying
# dependencies only requires metadata, it doesn't actually need to be fully
# installed.  Export `GIT_DIR` for subsequent `git`(1) commands.
export GIT_DIR="$PREFIX/lib/fpf/$NAME.git"
if [ ! -d "$GIT_DIR" ]
then echo "fpf: $NAME is not installed" >&2 && exit 1
fi

# List all supported package managers in the order in which they're used.
{
	if which "apt-get" "dpkg" >"/dev/null" 2>"/dev/null"
	then echo "apt"
	fi
	if which "yum" "rpm" >"/dev/null" 2>"/dev/null"
	then echo "yum"
	fi
	echo "cpan"
	echo "gem"
	echo "npm"
	echo "pear"
	echo "pecl"
	echo "pip"
	echo "fpr"
} |

# Write the manager, name, version, and pinnedness of each dependency to
# standard output.  The order of the dependencies from the same package
# manager is irrelevant.
while read MANAGER
do
	git config --get-regexp "^$MANAGER\\..+\\.version\$" |
	while read NAME VERSION
	do
		NAME="${NAME#"$MANAGER."}"
		NAME="${NAME%".version"}"
		if git config "$MANAGER.$NAME.pinned" >"/dev/null"
		then echo "$MANAGER $NAME $VERSION pinned"
		else echo "$MANAGER $NAME $VERSION"
		fi
	done || true
done
