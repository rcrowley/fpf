#!/bin/sh

#/ Usage: fpf-install-package [--no-deps] [--prefix=<prefix>] <package>
#/   --no-deps         don't install dependencies
#/   --prefix=<prefix> installation prefix
#/   <package>         package pathname

set -e

. "$(dirname "$(dirname "$0")")/lib/fpf.sh"

# The default when installing is to manage dependencies.
DEPS=1

# The default prefix is the one in which the FPF tools are installed.
PREFIX="$(dirname "$(dirname "$0")")"

usage() {
	grep "^#/" "$0" | cut -c"4-" >&2
	exit "$1"
}
while [ "$#" -gt 0 ]
do
	case "$1" in
		--deps) DEPS=1 shift;;
		--no-deps) DEPS=0 shift;;
		--prefix) PREFIX="$2" shift 2;;
		--prefix=*) PREFIX="$(echo "$1" | cut -c"10-")" shift;;
		-h|--help) usage 0;;
		-*) usage 1;;
		*) break;;
	esac
done
PACKAGE="$1"
[ -z "$PREFIX" -o -z "$PACKAGE" ] && usage 1

# It's critical that the prefix be fully-qualified or Git will lose track
# of itself by changing its working directory.
PREFIX="$(cd "$PREFIX" && pwd)"

# Extract the package and its metadata into a temporary directory, which
# will be cleaned up at exit.  Check that the metadata necessary for all
# FPF packages is present using the temporary `GIT_DIR`.
mkdir -p "$PREFIX/lib/fpf"
TMP="$(mktemp -d --tmpdir="$PREFIX/lib/fpf")"
export GIT_DIR="$TMP"
trap "rm -rf \"$TMP\"" EXIT INT TERM
tar xf "$PACKAGE" -C "$TMP"
ARCH="$(git config "fpf.arch" || true)"
[ "$ARCH" -a "$ARCH" != "$(fpf_arch)" ] &&
fpf_exit "$PACKAGE is for $ARCH, not $(fpf_arch)"
NAME="$(git config "fpf.name" || true)"
[ -z "$NAME" ] && fpf_exit "$PACKAGE has no name"
VERSION="$(git config "fpf.version" || true)"
[ -z "$VERSION" ] && fpf_exit "$PACKAGE has no version"

# Verify that no version of this package is already installed in this prefix.
# Export `GIT_DIR` for subsequent `git`(1) commands.
export GIT_DIR="$PREFIX/lib/fpf/$NAME.git"
[ -d "$GIT_DIR" ] &&
fpf_exit "$NAME $(git config "fpf.version") already installed"

# Now that the name of the package is known, move it into the appropriate
# place in FPF's library directory.
mv "$TMP" "$GIT_DIR"

# Begin a transaction.  If the transaction is aborted, remove `$GIT_DIR`.
fpf_txn_begin
echo "rm -rf \"$GIT_DIR\"" >>"$TXN_LOG"

# Install dependencies, if requested, or at least list them.  This handles
# its own rollback internally so the only consideration here is to rollback
# all dependencies if something later fails.
if [ "$DEPS" = 1 ]
then
	echo "$(dirname "$0")/fpf-rollback-deps --prefix=\"$PREFIX\" \"$NAME\"" >>"$TXN_LOG"
	"$(dirname "$0")/fpf-satisfy-deps" --prefix="$PREFIX" "$NAME"
else
	echo "fpf: not installing the following dependencies:" >&2
	"$(dirname "$0")/fpf-ls-deps" --prefix="$PREFIX" "$NAME"
	echo "fpf: install them with \`$(dirname "$0")/fpf-satisfy-deps --prefix=\"$PREFIX\" \"$NAME\"\`" >&2
fi

# Checkout a woring copy of the package in FPF's library.  `git-status`(1)
# and `git-diff-files`(1) are now able to verify the integrity of the package.
# Files must not exist or the installation will be rolled back.  Add each file
# and directory created to the rollback log.
COMMIT="$(git rev-parse "HEAD")"
TREE="$(git show --pretty="format:%T" "$COMMIT" | head -n"1")"
fpf_git_ls "$TREE" | while read MODE TYPE SHA PATHNAME
do
	MODE="$(printf "$MODE" | tail -c"4")"
	case "$TYPE" in
		"blob")
			[ -f "$PREFIX/$PATHNAME" ] &&
			fpf_exit "$PREFIX/$PATHNAME already installed"
			git cat-file "blob" "$SHA" >"$PREFIX/$PATHNAME"
			chmod "$MODE" "$PREFIX/$PATHNAME"
			echo "rm \"$PREFIX/$PATHNAME\"" >&3;;
		"tree")
			mkdir -m"$MODE" -p "$PREFIX/$PATHNAME"
			echo "rmdir --ignore-fail-on-non-empty \"$PREFIX/$PATHNAME\"" >&3;;
	esac
done 3>>"$TXN_LOG"

# Now the repository is non-bare, though the working copy is intermingled
# with other packages installed under this prefix.
git config --bool "core.bare" "false"
export GIT_WORK_TREE="$PREFIX"

# Update Git's index, which enables Git's typical working copy integrity
# checks.  Without these commands, the index file contains null bytes for
# all the `stat`(2) fields stored in the index.
git reset >"/dev/null"
git update-index --refresh

# Verify the installation's integrity for good measure.  This isn't strictly
# necessary but it's a good sanity check for `fpf-check`(1).
"$(dirname "$0")/fpf-check" --prefix="$PREFIX" "$NAME" >"/dev/null"

# Success!  Cancel installation rollback.
fpf_txn_commit
